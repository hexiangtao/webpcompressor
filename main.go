package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
)

type FrameInfo struct {
	Index     int
	X         int
	Y         int
	Duration  int
	Dispose   int
	Blend     int
	FramePath string
}

func main() {
	if len(os.Args) < 4 {
		fmt.Println("Áî®Ê≥ï: webpcompressor <input.webp> <quality[0-100]> <output.webp>")
		fmt.Println("ÊèêÁ§∫: Ë¥®ÈáèÂª∫ËÆÆ30-50ÂèØËé∑ÂæóÊõ¥Â•ΩÁöÑÂéãÁº©ÊïàÊûú")
		os.Exit(1)
	}

	inputFile := os.Args[1]
	quality, _ := strconv.Atoi(os.Args[2])
	outputFile := os.Args[3]

	tmpDir := "temp_frames"
	os.MkdirAll(tmpDir, 0755)

	fmt.Println("üîç Ëß£ÊûêÂ∏ßÊéßÂà∂‰ø°ÊÅØ...")
	frames, err := parseFrameInfo(inputFile)
	if err != nil {
		fmt.Println("‚ùå Ëß£ÊûêÂ§±Ë¥•:", err)
		os.Exit(1)
	}

	fmt.Println("üì¶ ÊèêÂèñÊØè‰∏ÄÂ∏ß...")
	for _, frame := range frames {
		frameOut := filepath.Join(tmpDir, fmt.Sprintf("frame_%d.webp", frame.Index))
		err := exec.Command("webpmux", "-get", "frame", strconv.Itoa(frame.Index), "-o", frameOut, inputFile).Run()
		if err != nil {
			fmt.Printf("‚ùå ÊèêÂèñÁ¨¨ %d Â∏ßÂ§±Ë¥•\n", frame.Index)
			os.Exit(1)
		}
		frames[frame.Index-1].FramePath = frameOut
	}

	fmt.Println("üéØ ÂéãÁº©Â∏ßÂõæÂÉè...")
	for i := range frames {
		out := filepath.Join(tmpDir, fmt.Sprintf("frame_compressed_%d.webp", frames[i].Index))
		// ‰ΩøÁî®Êõ¥ÊøÄËøõÁöÑÂéãÁº©ËÆæÁΩÆ
		args := []string{
			"-q", strconv.Itoa(quality), // Ë¥®ÈáèËÆæÁΩÆ
			"-m", "6", // ÂéãÁº©ÊñπÊ≥ï (0-6, 6ÊúÄÊÖ¢‰ΩÜÂéãÁº©ÁéáÊúÄÈ´ò)
			"-preset", "photo", // Êîπ‰∏∫photoÈ¢ÑËÆæÔºåÊõ¥ÈÄÇÂêàÁúüÂÆûÂõæÂÉè
			"-mt",       // Â§öÁ∫øÁ®ã
			"-f", "100", // ÊúÄÂ§ßÊª§Ê≥¢Âº∫Â∫¶
			"-sharpness", "0", // ÈîêÂåñ (0-7, 0‰∏∫ÊúÄÊüîÂíå)
			"-sns", "100", // Á©∫Èó¥Âô™Â£∞Êï¥ÂΩ¢ (0-100)
			"-segments", "4", // ÂàÜÊÆµÊï∞Èáè (1-4)
			"-pass", "10", // ÂàÜÊûêÈÅçÊï∞ (1-10)
			"-alpha_q", strconv.Itoa(quality / 2), // alphaÈÄöÈÅìË¥®ÈáèÊõ¥‰Ωé
			"-size", "0", // ‰∏çÈôêÂà∂Êñá‰ª∂Â§ßÂ∞èÔºå‰∏ìÊ≥®Ë¥®Èáè
			"-metadata", "none", // ÁßªÈô§ÂÖÉÊï∞ÊçÆ
			frames[i].FramePath,
			"-o", out,
		}
		err := exec.Command("cwebp", args...).Run()
		if err != nil {
			fmt.Printf("‚ùå ÂéãÁº©Á¨¨ %d Â∏ßÂ§±Ë¥•\n", frames[i].Index)
			os.Exit(1)
		}
		frames[i].FramePath = out // Áé∞Âú®Ëøô‰ºöÊ≠£Á°ÆÊõ¥Êñ∞ÂéüÂßãslice
	}

	fmt.Println("üß© ÈáçÁªÑÂ∏ßÂä®Áîª...")

	args := []string{}
	for _, frame := range frames {
		// Ê≠£Á°ÆÁöÑÊ†ºÂºèÔºö+duration+x_offset+y_offset+dispose_method+blend_method
		blendStr := "-b" // no blending
		if frame.Blend == 1 {
			blendStr = "+b" // blending
		}
		frameArg := fmt.Sprintf("+%d+%d+%d+%d%s", frame.Duration, frame.X, frame.Y, frame.Dispose, blendStr)
		args = append(args, "-frame", frame.FramePath, frameArg)
	}
	args = append(args, "-loop", "0", "-o", outputFile)

	err = exec.Command("webpmux", args...).Run()
	if err != nil {
		fmt.Println("‚ùå ÈáçÁªÑÂ§±Ë¥•:", err)
		os.Exit(1)
	}

	// ÊòæÁ§∫ÂéãÁº©ÊïàÊûú
	inputStat, _ := os.Stat(inputFile)
	outputStat, _ := os.Stat(outputFile)
	inputSize := inputStat.Size()
	outputSize := outputStat.Size()
	ratio := float64(outputSize) / float64(inputSize) * 100

	fmt.Printf("‚úÖ ÂÆåÊàêÔºÅÂéãÁº©Âä®ÂõæËæìÂá∫Ëá≥: %s\n", outputFile)
	fmt.Printf("üìä ÂéãÁº©ÊïàÊûú: %s -> %s (%.1f%%)\n",
		formatFileSize(inputSize), formatFileSize(outputSize), ratio)

	// Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
	fmt.Println("üßπ Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂...")
	os.RemoveAll(tmpDir)
}
func parseFrameInfo(input string) ([]FrameInfo, error) {
	cmd := exec.Command("webpmux", "-info", input)
	output, err := cmd.Output()
	if err != nil {
		return nil, err
	}

	scanner := bufio.NewScanner(strings.NewReader(string(output)))
	startReading := false
	var frames []FrameInfo

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		// Ê£ÄÊµãÂà∞Ë°®Â§¥ÂºÄÂßã
		if strings.HasPrefix(line, "No.") && strings.Contains(line, "duration") {
			startReading = true
			continue
		}

		if startReading {
			if line == "" {
				break
			}
			fields := strings.Fields(line)
			if len(fields) >= 9 {
				// ÂÆûÈôÖÊ†ºÂºèÔºöNo.: width height alpha x_offset y_offset duration dispose blend image_size compression
				indexStr := strings.TrimSuffix(fields[0], ":") // ÁßªÈô§ÂÜíÂè∑
				index, _ := strconv.Atoi(indexStr)
				x, _ := strconv.Atoi(fields[4])        // x_offset
				y, _ := strconv.Atoi(fields[5])        // y_offset
				duration, _ := strconv.Atoi(fields[6]) // duration

				// Â§ÑÁêÜdisposeÂ≠óÊÆµÔºà"none"/"background" -> 0/1Ôºâ
				dispose := 0
				if fields[7] == "background" {
					dispose = 1
				}

				// Â§ÑÁêÜblendÂ≠óÊÆµÔºà"no"/"yes" -> 0/1Ôºâ
				blend := 0
				if fields[8] == "yes" {
					blend = 1
				}

				frames = append(frames, FrameInfo{
					Index:    index,
					X:        x,
					Y:        y,
					Duration: duration,
					Dispose:  dispose,
					Blend:    blend,
				})
			}
		}
	}

	if len(frames) == 0 {
		return nil, fmt.Errorf("Êú™ËÉΩËß£ÊûêÂà∞‰ªª‰ΩïÂ∏ß")
	}
	return frames, nil
}

func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
